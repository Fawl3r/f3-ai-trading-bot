#!/usr/bin/env python3
"""
üîß HYPERLIQUID ENVIRONMENT SETUP
Helps you configure your .env file for Hyperliquid testing
"""

import os
import sys

def create_env_file():
    """Create .env file with proper configuration"""
    print("üîß HYPERLIQUID ENVIRONMENT SETUP")
    print("=" * 50)
    
    # Check if .env already exists
    if os.path.exists('.env'):
        print("‚ö†Ô∏è  .env file already exists!")
        overwrite = input("Overwrite existing .env file? (y/n): ").lower()
        if overwrite != 'y':
            print("‚ùå Setup cancelled")
            return False
    
    print("\nüìã Hyperliquid Configuration")
    print("=" * 50)
    
    # Get testnet preference
    print("\nüîó Network Selection:")
    print("1. TESTNET (recommended for first time)")
    print("2. MAINNET (real money trading)")
    
    while True:
        choice = input("\nSelect network (1 or 2): ").strip()
        if choice == '1':
            testnet = True
            print("‚úÖ Selected: TESTNET (safe for testing)")
            break
        elif choice == '2':
            testnet = False
            print("‚ö†Ô∏è  Selected: MAINNET (real money!)")
            confirm = input("Are you sure? This uses REAL money! (type 'YES'): ")
            if confirm == 'YES':
                break
            else:
                continue
        else:
            print("‚ùå Invalid choice. Please select 1 or 2.")
    
    # Get private key
    print(f"\nüîë Private Key Configuration:")
    print("You need your Hyperliquid private key.")
    print("Get it from: app.hyperliquid.xyz ‚Üí API ‚Üí Generate API Key")
    print("Format: 0x1234567890abcdef... (66 characters total)")
    
    while True:
        private_key = input("\nEnter your private key: ").strip()
        
        if not private_key:
            print("‚ùå Private key cannot be empty")
            continue
        
        if len(private_key) != 66 or not private_key.startswith('0x'):
            print("‚ùå Invalid format. Should be 66 characters starting with 0x")
            continue
        
        try:
            # Basic validation - check if it's hex
            int(private_key[2:], 16)
            print("‚úÖ Private key format looks valid")
            break
        except ValueError:
            print("‚ùå Invalid hex characters in private key")
            continue
    
    # Calculate wallet address (optional but helpful)
    wallet_address = ""
    try:
        from eth_account import Account
        account = Account.from_key(private_key)
        wallet_address = account.address
        print(f"üìç Derived wallet address: {wallet_address}")
    except Exception as e:
        print(f"‚ö†Ô∏è  Could not derive wallet address: {e}")
    
    # Trade size for testing
    print(f"\nüí∞ Test Trade Size:")
    if testnet:
        print("On testnet, you can use any amount (it's not real money)")
        default_size = "10.0"
    else:
        print("On mainnet, use small amounts for testing!")
        default_size = "5.0"
    
    while True:
        trade_size = input(f"Test trade size in USD (default: ${default_size}): ").strip()
        if not trade_size:
            trade_size = default_size
        
        try:
            float(trade_size)
            print(f"‚úÖ Test trade size: ${trade_size}")
            break
        except ValueError:
            print("‚ùå Invalid number")
            continue
    
    # Create .env content
    env_content = f"""# HYPERLIQUID ENVIRONMENT CONFIGURATION
# Generated by setup script

# ===== HYPERLIQUID API CREDENTIALS =====
HYPERLIQUID_PRIVATE_KEY={private_key}
HYPERLIQUID_ACCOUNT_ADDRESS={wallet_address}
HYPERLIQUID_TESTNET={"true" if testnet else "false"}

# ===== TESTING CONFIGURATION =====
TEST_TRADE_SIZE_USD={trade_size}

# ===== NOTIFICATION SETTINGS (OPTIONAL) =====
DISCORD_WEBHOOK_URL=
TELEGRAM_BOT_TOKEN=
TELEGRAM_CHAT_ID=

# ===== SECURITY REMINDERS =====
# - Never share your private key
# - Keep this .env file secure and don't commit it to version control
# - {"Start with testnet first to test the bot" if not testnet else "You're using testnet - this is safe for testing"}
# - Use small position sizes initially
"""
    
    # Write .env file
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        
        print("\n‚úÖ .env file created successfully!")
        print("=" * 50)
        print("üìÅ Configuration saved to .env")
        print(f"üîó Network: {'TESTNET' if testnet else 'MAINNET'}")
        print(f"üí∞ Test size: ${trade_size}")
        print("üîê Private key: ‚úÖ Configured")
        
        if wallet_address:
            print(f"üìç Wallet: {wallet_address}")
        
        print("\nüöÄ Ready to run trade execution test!")
        print("üí° Run: python run_hyperliquid_trade_test.py")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error creating .env file: {e}")
        return False

def main():
    """Main setup function"""
    try:
        success = create_env_file()
        
        if success:
            print("\nüéØ WHAT'S NEXT:")
            print("1. Run the trade test: python run_hyperliquid_trade_test.py")
            print("2. Or run the test directly: python hyperliquid_trade_execution_test.py")
            print("3. Check your balance on Hyperliquid to verify trades")
        else:
            print("\n‚ùå Setup incomplete")
            
    except KeyboardInterrupt:
        print("\n‚ùå Setup cancelled by user")
    except Exception as e:
        print(f"\n‚ùå Setup error: {e}")

if __name__ == "__main__":
    main() 